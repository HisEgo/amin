
1
صفحه ورود بازی  
در ابتدای اجرای برنامه، برنامه شما باید یک منوی اولیه به کاربر نشان دهد. در این منو باید این دکمهها موجود باشد: 
• شروع بازی (ادامه از آخرین مرحله)  
• مراحل بازی  
• تنظیمات بازی  
• خروج از بازی 
کارکرد همۀ این گزینهها به تفصیل در ادامه داک توضیح داده شده است. بازی در اینجا آغاز میشود... 
همه چیز از اینجا آغاز میشود! (شروع بازی)  
بعد از کلیک روی گزینۀ شروع بازی و یا انتخاب مرحلۀ بازی از طریق گزینۀ مراحل، منو بسته شده و تمام برنامههای 
باز باید وارد حالت minimized شوند. سپس تمام سیستمهای مرحله به همراه پورت های ورودی و خروجیشان به  
صورت اشکال مستقل از هم در صفحه بازی قرار گرفته و بازی آغاز می شود. دقت کنید تمام حرکات پیادهسازی شده در 
این بازی باید به صورت پیوسته (smooth) انجام بگیرند. فریم بازی نباید قابل جابجایی و تغییر سایز (همچنین 
minimize ،maximize شدن)  و بسته شدن باشد. 
دکمه های بازی  
شما باید دکمههایی برای حرکت و اعمال دیگر پیادهسازی کنید. انتخاب دکمه مورد نظر به انتخاب خودتان است: 
• پیشروی زمان: شما باید دو دکمه برای حرکت زمان به جلو و عقب اختصاص دهید. (استفاده از Arrow Key ها 
پیشنهاد میشود) فشار دادن همزمان دکمههای مربوط به حرکت زمان به جلو و عقب تغییرات زمانی شود. 
مکانیکهای مربوط به نحوه و اثر پیشروی زمان در ادامه داک توضیح داده خواهد شد. 
• سیمکشی: شما باید با بردن نشانگر ماوس روی یکی از پورتهای خروجی و بردن آن روی پورت ورودی یک 
سیستم دیگر در حال فشردن این کلید، یک سیم بین این دو پورت ایجاد کنید. 
• فروشگاه: در این بازی شما باید دکمهای مربوط به فروشگاه تعبیه کنید تا با فشردن آن، تمام اتفاقات و حرکات 
بازی متوقف شوند و فروشگاه بازی نمایش داده شود. تعریف و طراحی فروشگاه در ادامه داک توضیح داده شده  
است. 
(Game Env.) محیط بازی  
(HUD) اطلاعات بازی  
هشوگ ای هحفص یلااب ًامومع( هحفص زا یناکم رد دیاب امشهای پایینی صفحه) اطلاعات بازی را به کاربر نشان دهید. این  
اطلاعات باید شامل موارد زیر باشند: 
• Remaining Wire Length 
• Temporal Progress 
• Packet Loss 
• Coins 
صدا 
بازی شما باید دارای صدای پس زمینه باشد. همچنین قسمتهای اتصال موفق دو دستگاه، پایان هر مرحله، آسیب دیدن هر  
پکت، باید دارای صداها و آهنگهای پس زمینه منحصر به فرد باشند. (تعاریف مربوط به هر یک از این کلمات در ادامه  
داک آمده است) 
ولی من کیستم؟... 
شما نقش یک اپراتور شبکه را بازی میکنید که باید تعدادی پکت را بین دستگاههای موجود در شبکه انتقال دهید! شاید این  
توصیف کمی ساده به نظر برسد ولی توزیع و پردازش پکت بین تعداد زیادی سیستم وقتی که فقط مقدار محدودی سیم 
برای ایجاد اتصالات دارید کار دشواری خواهد بود. وظیفه شما این است که شبکه ای طراحی کنید که داده ها به سلامت به 
سیستمهای شبکه برسند. 
روغنکاری محیط گرافیکی... 
دریافت FPS بالا و روان تر به نظر رساندن بازی، معضلی به قدمت Tennis for Two (در سال 1958) بوده است. از  
این رو، چون ذات محاسبات کامپیوتری گسسته است، بازیسازها و برنامهنویس هبرح یپ رد خیرات لوط رد ًامئاد اههایی 
بر روان و پیوسته به نظر رساندن این فرایندهای گسسته بودهاند. این حربه ها؛ ایدههای هوشمندانهای مثل Ray-Tracing  ،
Anti-Aliasing تا ایده های بدیهیای مثل کنترل حرکت را شامل میشود. از سوی  دیگر شما به عنوان بازی ساز وظیفه 
دارید به بازیکن حس مثبتی از بازی القا کنید تا بازیکن بازی شما را فردا هم باز کند. (مگر اینکه در FromSoft مشغول  
به کار باشید!) همچنین نقلی معروف از توسعهکنندههای بازی وجود دارد که تکنیکالیتیهای کنترل حرکت را در یک جمله  
خلاصه می کند: Make movement feel good 
اما این مهم، چگونه قابل حصول است؟! در این فاز از شما انتظار میرود در این بازی از Acceleration  ،
Deceleration (حرکت شتابدار) در حرکت پکتها روی اتصالات شبکه استفاده کنید و همچنین راهکاری برای  
یکنواخت نشان دادن حرکت پکتها روی اتصالات بین سیستمهای مختلف طراحی کنید. (به دلیل اینکه همانطور که در  
فاز بعد خواهید دید، اتصالات بین دستگاه)دنتسین فاص طوطخ ًاموزل اه. دقت کنید که این پروژه 3 فاز دارد و این فاز اول  
پروژه است. 
Packet Loss (Death Mechanics) 
یکی از مهم ترین اجزای تعیین کننده در ساختار مکانیک هر بازی، مکانیکهای مربوط به آسیب و باخت است. در این  
بخش، تعریف آسیب دیدن هر کاراکتر و مکانیکهای مرگ مربوط به بازی را توضیح خواهیم داد: 
مکانیکهای برخورد و آسیب! 
در این بخش آسیب دیدن کاراکتر را به طور دقیق تعریف میکنیم. ابتدا تعدادی تعریف انجام میدهیم: (در این بخش و در  
طی فرآیند تشخیص برخوردها میتوانید قسمت امتیازی این بخش را پیادهسازی کنید)  
• بردار حرکت: به جهت حرکت یک پکت روی یکی از اتصالات بردار حرکت مربوط به آن پکت میگوییم. 
• برخورد: به هرگونه تماس دو پکت با هم اطلاق میشود و هر برخورد باعث ایجاد مقدار مشخصی نویز در هر  
پکت میشود. 
•  
آسیب: اگر یک پکت در حال عبور از اتصالات، از سیم منحرف شده و از مسیر سیم خارج شود و یا میزان نویز  
آن از اندازهاش بیشتر شود، آن پکت از دست خواهد رفت و به اندازه آن پکت به مقدار Packet Loss افزوده  
خواهد شد. 
در ادامه داک هرگونه استفاده از این کلمات به تعاریف ارائه شده در این بخش اشاره خواهند داشت. 
هنگامی که پکتها به یکدیگر برخورد کنند، یک مکانیک Impact فعال می شود که از نقطه برخورد، به همه جهات، 
موجی از ضربه ساطع میتکپ ردق ره ًاتعیبط .دنکهای دیگر از نقطه برخورد دورتر باشند، اثر این موج ضربه روی آنها 
کمتر و یا بیاثر خواهد بود. به ازای هر Entity در نزدیکی این نقطه برخورد، شما یک بردار اثر به آن نسبت میدهید که  
نآ یلعف تکرح رادرب اب ًاتیاهن Entity برآیند گرفته می شود. توجه کنید اثر دادن این بردار روی بردار حرکت باید با کنترل  
حرکت و به صورت smooth صورت بگیرد. اگر این موج ضربه به اندازه کافی به یک پکت نزدیک باشد، آن پکت از 
روی سیم در حال گذر منحرف خواهد شد و از دست خواهد رفت. 
توجه کنید نیاز نیست موج ضربه را به صورت گرافیکی پیاده دروخرب رثا حیضوت یارب ًافرص تاحیضوت نیا و دینک یزاس
موج ضربه هستند. همچنین توجه کنید موج ضربه روی دستگاهها و یا پکتهای درون یک دستگاه اثرگذار نیست و آنها را  
حرکت نمیدهد. 
و اما Game Over 
شما در ابتدای هر مرحله باید تعداد مشخصی پکت را برای زمان مشخصی در شبکه به جریان در آورید و هر زمانی و به 
هر نحوی که میزان Packet Loss شما از 50 درصد بیشتر شود، شبکه طراحی شده شما معیوب است و مرحله را 
خواهید باخت. (مگر در حالت داشتن Skill های خاص که در قسمت Skill Tree توضیح داده شدهاند!) در این حالت، 
پنجرهای برای کاربر باز میشود که Game Over را برای او نمایش میدهد. در این پنجره، شما باید تعداد پکتهای  
سالم موجود در شبکه و میزان Packet Loss را به کاربر نشان دهید (میتوانید به سلیقه خود ضریبهایی برای این 
یم تسیر ًامامت هلحرم ،نیا زا سپ .دیهد ناشن ربراک هب ار یزاب یونم هب تشگزاب و )دیوش لئاق هدش بسک زایتماشود (به  
استثنای وضعیت Skill Tree) و از ابتدا بازی را آغاز می کنید. 
مکانیکهای مربوط به پکتها (Packet Mechanics) 
این موجودات که توسط بازی کنترل میتکپ عاونا تیرثکا .دوب دنهاوخ تکرح لاح رد امش هکبش رد ًامئاد دنوشها و  
حرکات و پروتکلهای خاص مربوط به آنها در فاز بعدی تعریف میشوند و در این فاز به یک مدل کلی از پکتها اکتفا  
میکنیم. در این بازی هر پکت یک شکل هندسی است که مکانیکهای حرکتی مخصوص به خودش را دارد. در این فاز تنها 
دو نوع پکت به شکلهای مربع و مثلث وجود دارند. همچنین در این فاز اتصالات تنها به صورت خطوط صاف بین  
پورتهای مدنظر هستند. نحوه کار یک سیستم به این صورت است که هر پکت را از یک پورت ورودی دریافت کرده و 
بلافاصله از یک پورت خروجی خارج میکند. برای انتخاب پورت خروجی یک پکت، در صورتی که یک پورت سازگار  
وجود داشته باشد که هیچ پکتی رویم ًاحلاطصا( ،دشاب هتشادن رارق نآ هب لصتم میس یگوییم این پورت خالیست) اولویت  
با این پورت خواهد بود. در غیر این صورت به طور تصادفی یک پورت خالی برای خارج کردن پکت انتخاب میشود. در  
صورتی که هیچ یک از پورتهای خروجی دستگاه خالی نباشند، پکت در دستگاه ذخیره میشود تا یک پورت خالی در 
دسترس قرار بگیرد. ظرفیت ذخیرهسازی یک سیستم 5 پکت است. 
Progress Rewards, a PFL (Positive Feedback loop) 
با ورود هر پکت به یک سیستم تعدادی سکه به شبکه داده میشود که میتوان آنها را برای خرید Skill ها و آیتمهای 
فروشگاه استفاده کرد. همچنین در فاز بعدی برای مکانهای قرارگیری اتصالات دستگاهها امتیازاتی در قالب پاپآپ منظور  
خواهد شد. همچنین توجه کنید منظور از سازگاری یک پکت با یک پورت، هم شکل بودن آنها خواهد بود. به این معنا،  
پورتهای مربعی با پکتهای مربعی سازگار و با پکتتروپ یارب ًاهباشم( .دوب دنهاوخ راگزاسان یثلثم یاههایی که در 
فاز بعد معرفی خواهند شد)  
 
سرعت حرکت با شروع از یک پورت 
سازگار نصف سرعت حرکت آن با 
شروع حرکت از یک پورت ناسازگار  
است. سکه به شبکه اضافه می کند 
هر بار ورود به سیستم 1 حرکت آن با شروع 
حرکت از یک پورت ناسازگار است. سکه به  
شبکه اضافه می کند (مگر در اثر Impact) 
حرکت آن در هر یک از پورتها با سرعت  
ثابت انجام میگیرد. (مگر در اثر Impact) 
اندازه: 
2 واحد 
مربع 
قرمز  
سرعت حرکت با شروع حرکت از  
پورتهای سازگار با سرعت ثابت 
است (مگر در اثر Impact) اما 
حرکت آن در عبور از یک پورت 
ناسازگار شتابدار خواهد بود 
هر بار ورود به سیستم 2 سکه به شبکه اضافه  
میکند  
اندازه:  
3 واحد  
مثلث  
زرد 
(Network Systems) سیستمها 
هر سیستم یک واحد شبکه است که به شکل یک مستطیل در فریم بازی نمایش میدهد. هر سیستم یک اندیکاتور در بالای 
آن دارد که در ابتدای مرحله خاموش است. همچنین هر سیستم تعدادی پورت ورودی در سمت چپ و تعدادی پورت 
خروجی در سمت راست خود دارد. شما باید بتوانید با بردن نشانگر ماوس روی یک پورت خروجی، نگه داشتن کلید  
مربوط به سیمکشی و بردن نشانگر به پورت ورودی یک سیستم دیگر، به شرطی که طول سیم به اندازه کافی موجود باشد  
یک خط صاف بین این دو پورت رسم کنید. این سیم یک مسیر برای انتقال پکتها از یک سیستم به سیستم دیگر است. 
پورتها در این فاز صرفا مربعی و مثلثی هستند و در فاز بعد پورتهای متفاوتی معرفی خواهند شد. دقت کنید امکان 
ایجاد اتصال بین پورت ورودی و خروجی یک سیستم وجود ندارد. در فازهای بعد شرایط دیگری هم به شبکه اضافه  
خواهند شد. 
سیستمهای مرجع  
سیستمهای مرجع سیستمهای خاصی هستند که پکتها را از پورتهای ورودی خود به پورتهای خروجی انتقال نمیدهند. 
هر سیستم مرجع تعداد مشخصی پکت را با فرکانس مشخصی (که در هر مرحله برای هر سیستم تعیین میشود) از طریق 
پورتهای خروجی وارد شبکه میکند و این پکتها از طریق شبکه طراحی شده به سیستمهای دیگر منتقل میشوند. وظیفه  
شما به عنوان اپراتور این است که با استفاده از تمام سیستمهای موجود و طول سیم محدود داده شده، شبکهای طراحی کنید 
که هر پکت (که از پورت خروجی یک سیستم مرجع وارد شبکه شده است) در نهایت به یک سیستم مرجع بازگردد و 
Packet Loss محدود باشد. 
اتصالات سیستم 
همانطور که پیشتر هم اشاره شده است، اتصالاتی که بین سیستمهای شبکه ایجاد می شود با استفاده از طول سیم محدودی  
هدش فرصم میس لوط ًامئاد دیاب امش هجیتن رد و دش دنهاوخ ماجنا (Wire Length) برای ایجاد شبکه را محاسبه کنید. 
(این کار در فازهای بعدی که اتصالات خطوط صاف نیستند چالش جدی ای خواهد بود) در شبکه طراحی شده هر دستگاه 
  دیاب امش هکبش نینچمه .دشاب دنبمه ًاموزل هدش لیکشت فارگ دیاب هجیتن رد و دشاب هتشاد یسرتسد رگید هاگتسد ره هب دیاب
تمام پورتها را پر کند. 
پیش روی زمان (Temporal Progress) 
همانطور که اشاره شد، علاوه بر محدودیتهای شبکه طراحی شده در بازی، شما باید جلوی از دست رفتن پکتها را هم  
بگیرید. به این منظور شما باید یک نوار زمانی در بازی خود تعبیه کنید که با جلو و عقب بردن آن، وضعیت پکتها را 
در زمان های متفاوت در شبکه خود ببینید. در این وضعیت شما باید بتوانید اتصالات خود را تغییر دهید و پس از رسیدن  
به یک شبکه معتبر، وضعیت پکتهای شبکه جدید را در این زمان ببینید. این قابلیت به خصوص در فاز بعدی (که قابلیت 
تغییر شکل اتصالات سیستمها وجود دارد) به شما برای گذراندن مراحل کمک خواهد کرد. در نهایت شما باید گزینهای 
برای اجرای شبکه خود داشته باشید، با فشردن دکمه اجرا، پکتها به صورت برنامهریزی شده از سیستمهای مرجع وارد  
شبکه خواهند شد و به جریان در خواهند آمد. در صورتی که پکتهای ارسالی با Loss کمتر از 50  درصد به سیستمهای  
مرجع برگردند، مرحله با موفقیت پشت سر گذاشته میشود. در این موقعیت شما باید اطلاعات مرحله را به بازیکن نشان 
دهید و گزینهای نیز برای بازگشت به منو یا رفتن به مرحله بعد طراحی کنید. 
به منو باز میگردیم! 
فروشگاه  
همانطور که اشاره شد، شما باید دکمهای را به فروشگاه بازی اختصاص دهید تا تنها وقتی که در حین بازی فشرده شد  
بازی را متوقف کرده و پنجرهای برای کاربر باز کند. در این پنجره کاربر باید بتواند در ازای مقداری از سکه هایش، 
قابلیتهایی را تنها برای همان مرحله خریداری کند تا همان لحظه شروع به اثر کنند. در این فاز باید قابلیتهای زیر در  
این فروشگاه قابل خریدن باشند: 
• '0' Atar: بازیکن باید بتواند با پرداخت 3 سکه، اثر موجهای Impact را به مدت 10 ثانیه غیرفعال کند. 
• '0' Airyaman: بازیکن باید بتواند با پرداخت 4 سکه، برخورد پکتهای موجود در شبکه را برای 5 ثانیه  
غیرفعال کند. 
• '0' Anahita: بازیکن باید بتواند در ازای پرداخت  5 سکه، نویز تمام پکتهای حاضر در شبکه را صفر کند. 
Settings 
شما باید بتوانید صدای بازی را در قالب یک slider تنظیم کنید.  
طراحی مراحل مختلف بازی  
در نهایت وقتی تمام بیس گرافیکی و لاجیک فاز اول را پیاده سازی کردید، نیاز است مراحلی برای بازی طراحی کنید. در  
این فاز تنها کافیست 2 مرحله متفاوت برای بازی خود طراحی کنید. توجه کنید که انتظار میرود مراحل طراحی شده از  
کیفیت مناسب برخوردار باشند به نحوی که مشخصه های متفاوت بازی در آن قابل مشاهده باشد و بتوان قوانین مختلف 
بازی را در آنها آزمایش کرد. 
ابزارهایی که از شما انتظار میرود در توسعه کدتان از آنها استفاده کنید  
استفاده از Build Tool (میون و گریدل) 
پروژه شما باید شامل یک کانفیگ کامل از ابزارهای Maven ،Gradle باشد به طوری که فقط با استفاده از سورس 
پروژه بتوان آن را بیلد و اجرا کرد. به این معنا که کتابخانههای مورد استفاده در پروژه به طور خودکار دانلود و استفاده  
شوند. استفاده از ابزارهای مشابه مثل Apache Ant بلامانع است. 
